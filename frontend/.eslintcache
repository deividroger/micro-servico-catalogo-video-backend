[{"/var/www/frontend/src/index.tsx":"1","/var/www/frontend/src/reportWebVitals.ts":"2","/var/www/frontend/src/App.tsx":"3","/var/www/frontend/src/components/Navbar/index.tsx":"4","/code-micro-videos/frontend/src/index.tsx":"5","/code-micro-videos/frontend/src/reportWebVitals.ts":"6","/code-micro-videos/frontend/src/App.tsx":"7","/code-micro-videos/frontend/src/components/Navbar/index.tsx":"8","/code-micro-videos/frontend/src/components/Navbar/Menu.tsx":"9","/code-micro-videos/frontend/src/components/Page.tsx":"10","/code-micro-videos/frontend/src/routes/AppRouter.tsx":"11","/code-micro-videos/frontend/src/routes/index.tsx":"12","/code-micro-videos/frontend/src/pages/Dashboard.tsx":"13","/code-micro-videos/frontend/src/components/Breadcrumbs.tsx":"14","/code-micro-videos/frontend/src/pages/category/PageList.tsx":"15","/code-micro-videos/frontend/src/pages/category/Table.tsx":"16","/code-micro-videos/frontend/src/util/http/index.ts":"17","/code-micro-videos/frontend/src/pages/cast-member/PageList.tsx":"18","/code-micro-videos/frontend/src/pages/cast-member/Table.tsx":"19","/code-micro-videos/frontend/src/pages/genre/PageList.tsx":"20","/code-micro-videos/frontend/src/pages/genre/Table.tsx":"21","/code-micro-videos/frontend/src/util/http/category-http.ts":"22","/code-micro-videos/frontend/src/util/http/http-resource.ts":"23","/code-micro-videos/frontend/src/pages/category/PageForm.tsx":"24","/code-micro-videos/frontend/src/pages/category/Form.tsx":"25","/code-micro-videos/frontend/src/pages/cast-member/PageForm.tsx":"26","/code-micro-videos/frontend/src/pages/cast-member/Form.tsx":"27","/code-micro-videos/frontend/src/util/http/cast-member-http.ts":"28","/code-micro-videos/frontend/src/routes/categoryRoutes.tsx":"29","/code-micro-videos/frontend/src/routes/genresRoutes.tsx":"30","/code-micro-videos/frontend/src/routes/castMembersRoutes.tsx":"31","/code-micro-videos/frontend/src/routes/dashboardRoutes.tsx":"32","/code-micro-videos/frontend/src/pages/genre/PageForm.tsx":"33","/code-micro-videos/frontend/src/pages/genre/Form.tsx":"34","/code-micro-videos/frontend/src/util/http/genre-http.ts":"35","/code-micro-videos/frontend/src/theme.ts":"36","/code-micro-videos/frontend/src/components/Badge.tsx":"37","/code-micro-videos/frontend/src/util/vendor/yup.ts":"38","/code-micro-videos/frontend/src/components/SnackbarProvider.tsx":"39","/code-micro-videos/frontend/src/util/models.ts":"40","/code-micro-videos/frontend/src/components/SubmmitActions.tsx":"41","/code-micro-videos/frontend/src/components/DefaultForm.tsx":"42","/code-micro-videos/frontend/src/components/Table/index.tsx":"43","/code-micro-videos/frontend/src/components/Table/FilterResetButton.tsx":"44","/code-micro-videos/frontend/src/components/Table/DebouncedTableSearch.js":"45","/code-micro-videos/frontend/src/store/filter/index.ts":"46","/code-micro-videos/frontend/src/hooks/useFilter.ts":"47","/code-micro-videos/frontend/src/routes/videoRoutes.tsx":"48","/code-micro-videos/frontend/src/pages/video/PageForm.tsx":"49","/code-micro-videos/frontend/src/pages/video/PageList.tsx":"50","/code-micro-videos/frontend/src/pages/video/Table.tsx":"51","/code-micro-videos/frontend/src/util/http/video-http.ts":"52","/code-micro-videos/frontend/src/components/Rating.tsx":"53","/code-micro-videos/frontend/src/pages/video/Form/Index.tsx":"54","/code-micro-videos/frontend/src/pages/video/Form/RatingField.tsx":"55","/code-micro-videos/frontend/src/components/InputFile.tsx":"56","/code-micro-videos/frontend/src/pages/video/Form/UploadField.tsx":"57","/code-micro-videos/frontend/src/components/AsyncAutoComplete.tsx":"58","/code-micro-videos/frontend/src/components/GridSelectedItem.tsx":"59","/code-micro-videos/frontend/src/components/GridSelected.tsx":"60","/code-micro-videos/frontend/src/hooks/useHttpHandled.ts":"61","/code-micro-videos/frontend/src/pages/video/Form/GenreField.tsx":"62","/code-micro-videos/frontend/src/pages/video/Form/CategoryField.tsx":"63","/code-micro-videos/frontend/src/hooks/useCollectionManager.ts":"64","/code-micro-videos/frontend/src/util/model-filters.ts":"65","/code-micro-videos/frontend/src/pages/video/Form/CastMemberField.tsx":"66"},{"size":500,"mtime":1611865961266,"results":"67","hashOfConfig":"68"},{"size":425,"mtime":1611865961266,"results":"69","hashOfConfig":"68"},{"size":258,"mtime":1611889797040,"results":"70","hashOfConfig":"68"},{"size":245,"mtime":1611889895724,"results":"71","hashOfConfig":"68"},{"size":500,"mtime":1611865961266,"results":"72","hashOfConfig":"73"},{"size":425,"mtime":1611865961266,"results":"74","hashOfConfig":"73"},{"size":835,"mtime":1618081186416,"results":"75","hashOfConfig":"73"},{"size":941,"mtime":1611971943655,"results":"76","hashOfConfig":"73"},{"size":2300,"mtime":1625800275328,"results":"77","hashOfConfig":"73"},{"size":616,"mtime":1612319500111,"results":"78","hashOfConfig":"73"},{"size":614,"mtime":1612026293655,"results":"79","hashOfConfig":"73"},{"size":591,"mtime":1625800137105,"results":"80","hashOfConfig":"73"},{"size":282,"mtime":1612023918713,"results":"81","hashOfConfig":"73"},{"size":2461,"mtime":1614898469175,"results":"82","hashOfConfig":"73"},{"size":739,"mtime":1614890359578,"results":"83","hashOfConfig":"73"},{"size":6083,"mtime":1625800437470,"results":"84","hashOfConfig":"73"},{"size":127,"mtime":1625598635481,"results":"85","hashOfConfig":"73"},{"size":745,"mtime":1614890370970,"results":"86","hashOfConfig":"73"},{"size":8337,"mtime":1625601820538,"results":"87","hashOfConfig":"73"},{"size":728,"mtime":1614890341345,"results":"88","hashOfConfig":"73"},{"size":9457,"mtime":1625602232122,"results":"89","hashOfConfig":"73"},{"size":173,"mtime":1625598564999,"results":"90","hashOfConfig":"73"},{"size":2161,"mtime":1627077174395,"results":"91","hashOfConfig":"73"},{"size":367,"mtime":1617422438367,"results":"92","hashOfConfig":"73"},{"size":4676,"mtime":1626795763443,"results":"93","hashOfConfig":"73"},{"size":263,"mtime":1613521279483,"results":"94","hashOfConfig":"73"},{"size":4687,"mtime":1626795832590,"results":"95","hashOfConfig":"73"},{"size":179,"mtime":1625598550855,"results":"96","hashOfConfig":"73"},{"size":706,"mtime":1617418804994,"results":"97","hashOfConfig":"73"},{"size":641,"mtime":1618081782531,"results":"98","hashOfConfig":"73"},{"size":755,"mtime":1618081698996,"results":"99","hashOfConfig":"73"},{"size":217,"mtime":1613523159029,"results":"100","hashOfConfig":"73"},{"size":254,"mtime":1618089339600,"results":"101","hashOfConfig":"73"},{"size":5563,"mtime":1626795774283,"results":"102","hashOfConfig":"73"},{"size":163,"mtime":1625598579503,"results":"103","hashOfConfig":"73"},{"size":3463,"mtime":1625599279249,"results":"104","hashOfConfig":"73"},{"size":637,"mtime":1614898053376,"results":"105","hashOfConfig":"73"},{"size":377,"mtime":1625805101145,"results":"106","hashOfConfig":"73"},{"size":1526,"mtime":1626261926003,"results":"107","hashOfConfig":"73"},{"size":1605,"mtime":1625800620745,"results":"108","hashOfConfig":"73"},{"size":1037,"mtime":1618349567645,"results":"109","hashOfConfig":"73"},{"size":875,"mtime":1618370285382,"results":"110","hashOfConfig":"73"},{"size":4374,"mtime":1625598312447,"results":"111","hashOfConfig":"73"},{"size":672,"mtime":1625598827387,"results":"112","hashOfConfig":"73"},{"size":3680,"mtime":1625599956994,"results":"113","hashOfConfig":"73"},{"size":3013,"mtime":1625598471280,"results":"114","hashOfConfig":"73"},{"size":8434,"mtime":1625603845288,"results":"115","hashOfConfig":"73"},{"size":636,"mtime":1625800947221,"results":"116","hashOfConfig":"73"},{"size":369,"mtime":1625870793890,"results":"117","hashOfConfig":"73"},{"size":785,"mtime":1625800417066,"results":"118","hashOfConfig":"73"},{"size":6324,"mtime":1627069217274,"results":"119","hashOfConfig":"73"},{"size":163,"mtime":1625801362761,"results":"120","hashOfConfig":"73"},{"size":942,"mtime":1625870469510,"results":"121","hashOfConfig":"73"},{"size":15620,"mtime":1627099126819,"results":"122","hashOfConfig":"73"},{"size":2205,"mtime":1625874131577,"results":"123","hashOfConfig":"73"},{"size":2159,"mtime":1627077575461,"results":"124","hashOfConfig":"73"},{"size":2162,"mtime":1627076928114,"results":"125","hashOfConfig":"73"},{"size":3203,"mtime":1627080633034,"results":"126","hashOfConfig":"73"},{"size":911,"mtime":1627002176212,"results":"127","hashOfConfig":"73"},{"size":724,"mtime":1626736547429,"results":"128","hashOfConfig":"73"},{"size":504,"mtime":1626792099563,"results":"129","hashOfConfig":"73"},{"size":4150,"mtime":1627076622800,"results":"130","hashOfConfig":"73"},{"size":4341,"mtime":1627076493059,"results":"131","hashOfConfig":"73"},{"size":781,"mtime":1626747412588,"results":"132","hashOfConfig":"73"},{"size":240,"mtime":1627098886979,"results":"133","hashOfConfig":"73"},{"size":3595,"mtime":1627078236713,"results":"134","hashOfConfig":"73"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},"1dpw0hl",{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"1qzgm0n",{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"146"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"146"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"146"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"146"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"146"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"146"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"146"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"146"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"146"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"146"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"146"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"146"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"146"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"146"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"146"},"/var/www/frontend/src/index.tsx",[],["286","287"],"/var/www/frontend/src/reportWebVitals.ts",[],"/var/www/frontend/src/App.tsx",[],"/var/www/frontend/src/components/Navbar/index.tsx",[],"/code-micro-videos/frontend/src/index.tsx",[],["288","289"],"/code-micro-videos/frontend/src/reportWebVitals.ts",[],"/code-micro-videos/frontend/src/App.tsx",[],"/code-micro-videos/frontend/src/components/Navbar/index.tsx",[],"/code-micro-videos/frontend/src/components/Navbar/Menu.tsx",[],"/code-micro-videos/frontend/src/components/Page.tsx",[],"/code-micro-videos/frontend/src/routes/AppRouter.tsx",[],"/code-micro-videos/frontend/src/routes/index.tsx",[],"/code-micro-videos/frontend/src/pages/Dashboard.tsx",[],"/code-micro-videos/frontend/src/components/Breadcrumbs.tsx",[],"/code-micro-videos/frontend/src/pages/category/PageList.tsx",[],"/code-micro-videos/frontend/src/pages/category/Table.tsx",["290","291","292","293","294","295","296","297"],"import * as React from 'react';\nimport {useEffect, useReducer, useRef, useState} from \"react\";\nimport format from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport categoryHttp from \"../../util/http/category-http\";\nimport {BadgeNo, BadgeYes} from \"../../components/Badge\";\nimport {Category, ListResponse} from \"../../util/models\";\nimport DefaultTable, {makeActionStyles, TableColumn, MuiDataTableRefComponent} from '../../components/Table';\nimport {useSnackbar} from \"notistack\";\nimport {IconButton, MuiThemeProvider, Theme} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport {FilterResetButton} from \"../../components/Table/FilterResetButton\";\nimport reducer, {INITIAL_STATE, Creators} from \"../../store/filter\";\nimport useFilter from \"../../hooks/useFilter\";\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: '43%',\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"is_active\",\n        label: \"Ativo?\",\n        width: '4%',\n        options: {\n            filter: true,\n            filterOptions: {\n              names: ['Sim', 'Não']\n            },\n            customBodyRender(value, tableMeta, updateValue) {\n                return value ? <BadgeYes/> : <BadgeNo/>;\n            }\n        },\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue) {\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            sort: false,\n            filter: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categories/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                )\n            }\n        }\n    }\n];\n\nconst debounceTime = 300;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\nconst Table = () => {\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data, setData] = useState<Category[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    const tableRef = useRef() as React.MutableRefObject<MuiDataTableRefComponent>;\n\n    const {\n        columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords,\n    } = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef\n    });\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order\n    ]);\n\n    async function getData() {\n        setLoading(true);\n        try {\n            const {data} = await categoryHttp.list<ListResponse<Category>>({\n                queryParams: {\n                    search: filterManager.cleanSearchText(debouncedFilterState.search),\n                    page: debouncedFilterState.pagination.page,\n                    per_page: debouncedFilterState.pagination.per_page,\n                    sort: debouncedFilterState.order.sort,\n                    dir: debouncedFilterState.order.dir,\n                }\n            });\n            if (subscribed.current) {\n                setData(data.data);\n                setTotalRecords(data.meta.total);\n            }\n        } catch (error) {\n            console.error(error);\n            if (categoryHttp.isCancelledRequest(error)) {\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error',}\n            )\n        } finally {\n            setLoading(false);\n        }\n    }\n\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                title=\"\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                ref={tableRef}\n                options={{\n                    serverSide: true,\n                    responsive: \"scrollMaxHeight\",\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    customToolbar: () => (\n                        <FilterResetButton\n                            handleClick={() => filterManager.resetFilter()}\n                        />\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction)\n                    \n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table;","/code-micro-videos/frontend/src/util/http/index.ts",[],"/code-micro-videos/frontend/src/pages/cast-member/PageList.tsx",[],"/code-micro-videos/frontend/src/pages/cast-member/Table.tsx",["298","299","300","301"],"import * as React from 'react';\nimport {useEffect, useState} from \"react\";\nimport format from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport castMemberHttp from \"../../util/http/cast-member-http\";\nimport {CastMember, CastMemberTypeMap, ListResponse} from \"../../util/models\";\nimport {IconButton, MuiThemeProvider} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DefaultTable, {makeActionStyles, TableColumn, MuiDataTableRefComponent} from '../../components/Table';\nimport {useSnackbar} from \"notistack\";\nimport {useRef} from \"react\";\nimport useFilter from \"../../hooks/useFilter\";\nimport {FilterResetButton} from \"../../components/Table/FilterResetButton\";\nimport * as yup from '../../util/vendor/yup';\nimport {invert} from 'lodash';\n\nconst castMemberNames = Object.values(CastMemberTypeMap);\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"43%\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"type\",\n        label: \"Tipo\",\n        width: '4%',\n        options: {\n            filterOptions: {\n                names: castMemberNames\n            },\n            customBodyRender: (value, tableMeta, updateValue) => { \n                return CastMemberTypeMap[value];\n            },\n        }\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue) {\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <span>\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/cast-members/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                </span>\n                )\n            }\n        }\n    }\n];\nconst debounceTime = 300;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\nconst Table = () => {\n\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data, setData] = useState<CastMember[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    const tableRef = useRef() as React.MutableRefObject<MuiDataTableRefComponent>;\n\n    const {\n        columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords,\n    } = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef,\n        extraFilter: {\n            createValidationSchema: () => {\n                return yup.object().shape({\n                    type: yup.string()\n                        .nullable()\n                        .transform(value => {\n                            return !value || !castMemberNames.includes(value) ? undefined : value;\n                        })\n                        .default(null)\n                })\n            },\n            formatSearchParams: (debouncedState) => {\n                return debouncedState.extraFilter\n                    ? {\n                        ...(\n                            debouncedState.extraFilter.type &&\n                            {type: debouncedState.extraFilter.type}\n                        ),\n                    }\n                    : undefined\n            },\n            getStateFromURL: (queryParams) => {\n                return {\n                    type: queryParams.get('type')\n                }\n            }\n        }\n    });\n    \n    const indexColumnType = columns.findIndex(c => c.name === 'type');\n    const columnType = columns[indexColumnType];\n    const typeFilterValue = filterState.extraFilter && filterState.extraFilter.type as never;\n    (columnType.options as any).filterList = typeFilterValue ? [typeFilterValue] : [];\n\n    const serverSideFilterList = columns.map(column => []);\n    if (typeFilterValue) {\n        serverSideFilterList[indexColumnType] = [typeFilterValue];\n    }\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order,\n        JSON.stringify(debouncedFilterState.extraFilter)\n    ]);\n\n    async function getData() {\n        setLoading(true);\n        try {\n            const {data} = await castMemberHttp.list<ListResponse<CastMember>>({\n                queryParams: {\n                    search: filterManager.cleanSearchText(debouncedFilterState.search),\n                    page: debouncedFilterState.pagination.page,\n                    per_page: debouncedFilterState.pagination.per_page,\n                    sort: debouncedFilterState.order.sort,\n                    dir: debouncedFilterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.type &&\n                        {type: invert(CastMemberTypeMap)[debouncedFilterState.extraFilter.type]}\n                    )\n                }\n            });\n            if (subscribed.current) {\n                setData(data.data);\n                setTotalRecords(data.meta.total);\n            }\n        } catch (error) {\n            console.error(error);\n            if (castMemberHttp.isCancelledRequest(error)) {\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error',}\n            )\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                title=\"\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                ref={tableRef}\n                options={{\n                    serverSideFilterList,\n                    serverSide: true,\n                    responsive: \"scrollMaxHeight\",\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column, filterList, type) => {\n                        const columnIndex = columns.findIndex(c => c.name === column);\n                        \n                        filterManager.changeExtraFilter({\n                            [column]: filterList[columnIndex].length ? filterList[columnIndex][0] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton\n                            handleClick={() => filterManager.resetFilter()}\n                        />\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction)\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table;","/code-micro-videos/frontend/src/pages/genre/PageList.tsx",[],"/code-micro-videos/frontend/src/pages/genre/Table.tsx",["302","303","304","305","306","307","308"],"import * as React from 'react';\nimport {useEffect, useState} from \"react\";\nimport format from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport genreHttp from \"../../util/http/genre-http\";\nimport {Category, Genre, ListResponse} from \"../../util/models\";\nimport {IconButton, MuiThemeProvider} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DefaultTable, {makeActionStyles, TableColumn, MuiDataTableRefComponent} from \"../../components/Table\";\nimport {BadgeNo, BadgeYes} from \"../../components/Badge\";\nimport {useSnackbar} from \"notistack\";\nimport {useRef} from \"react\";\nimport useFilter from \"../../hooks/useFilter\";\nimport * as yup from \"../../util/vendor/yup\";\nimport {FilterResetButton} from \"../../components/Table/FilterResetButton\";\nimport categoryHttp from \"../../util/http/category-http\";\nimport {cloneDeep} from 'lodash';\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"23%\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"is_active\",\n        label: \"Ativo?\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue) {\n                return value ? <BadgeYes/> : <BadgeNo/>;\n            }\n        },\n        width: '4%',\n    },\n    {\n        name: \"categories\",\n        label: \"Categorias\",\n        width: '20%',\n        options: {\n            filterType: 'multiselect',\n            filterOptions: {\n                names: []\n            },\n            customBodyRender: (value, tableMeta, updateValue) => {\n                return value.map(value => value.name).join(', ');\n            }\n        }\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue) {\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <span>\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/genres/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                </span>\n                )\n            }\n        }\n    }\n];\n\nconst debounceTime = 300;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\nconst Table = () => {\n\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data, setData] = useState<Genre[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [categories, setCategories] = useState<Category[]>();\n    const tableRef = useRef() as React.MutableRefObject<MuiDataTableRefComponent>;\n\n    const {\n        columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords,\n    } = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef,\n        extraFilter: {\n            createValidationSchema: () => {\n                return yup.object().shape({\n                    categories: yup.mixed()\n                        .nullable()\n                        .transform(value => {\n                            return !value || value === '' ? undefined : value.split(',');\n                        })\n                        .default(null),\n                })\n            },\n            formatSearchParams: (debouncedState) => {\n                return debouncedState.extraFilter ? {\n                    ...(\n                        debouncedState.extraFilter.categories &&\n                        {categories: debouncedState.extraFilter.categories.join(',')}\n                    )\n                } : undefined\n            },\n            getStateFromURL: (queryParams) => {\n                return {\n                    categories: queryParams.get('categories')\n                }\n            }\n        }\n    });\n\n    const indexColumnCategories = columns.findIndex(c => c.name === 'categories');\n    const columnCategories = columns[indexColumnCategories];\n    const categoriesFilterValue = filterState.extraFilter && filterState.extraFilter.categories;\n    (columnCategories.options as any).filterList = categoriesFilterValue ? categoriesFilterValue : [];\n    const serverSideFilterList = columns.map(column => []);\n    if (categoriesFilterValue) {\n        serverSideFilterList[indexColumnCategories] = categoriesFilterValue;\n    }\n\n    useEffect(() => {\n        let isSubscribed = true;\n        (async () => {\n            try {\n                const {data} = await categoryHttp.list({queryParams: {all: ''}});\n                if (isSubscribed) {\n                    setCategories(data.data);\n                    (columnCategories.options as any).filterOptions.names = data.data.map(category => category.name)\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error',}\n                )\n            }\n        })();\n\n        return () => {\n            isSubscribed = false;\n        }\n    }, []);\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order,\n        JSON.stringify(debouncedFilterState.extraFilter)\n    ]);\n\n    async function getData() {\n        setLoading(true);\n        try {\n            const {data} = await genreHttp.list<ListResponse<Genre>>({\n                queryParams: {\n                    search: filterManager.cleanSearchText(debouncedFilterState.search),\n                    page: debouncedFilterState.pagination.page,\n                    per_page: debouncedFilterState.pagination.per_page,\n                    sort: debouncedFilterState.order.sort,\n                    dir: debouncedFilterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.categories &&\n                        {categories: debouncedFilterState.extraFilter.categories.join(',')}\n                    )\n                }\n            });\n            if (subscribed.current) {\n                setData(data.data);\n                setTotalRecords(data.meta.total);\n            }\n        } catch (error) {\n            console.error(error);\n            if (genreHttp.isCancelledRequest(error)) {\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error',}\n            )\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                title=\"\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                ref={tableRef}\n                options={{\n                    serverSideFilterList,\n                    serverSide: true,\n                    responsive: \"scrollMaxHeight\",\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column, filterList, type) => {\n                        const columnIndex = columns.findIndex(c => c.name === column);\n                        filterManager.changeExtraFilter({\n                            [column]: filterList[columnIndex].length ? filterList[columnIndex] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton\n                            handleClick={() => filterManager.resetFilter()}\n                        />\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction)\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table;","/code-micro-videos/frontend/src/util/http/category-http.ts",[],"/code-micro-videos/frontend/src/util/http/http-resource.ts",[],"/code-micro-videos/frontend/src/pages/category/PageForm.tsx",[],"/code-micro-videos/frontend/src/pages/category/Form.tsx",["309"],"import * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport { TextField, Checkbox, FormControlLabel } from '@material-ui/core'\n\nimport {useForm} from \"react-hook-form\";\nimport categoryHttp from '../../util/http/category-http';\nimport * as yup from '../../util/vendor/yup'\nimport { useHistory, useParams } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { Category } from '../../util/models';\nimport SubmmitActions from '../../components/SubmmitActions';\nimport { DefaultForm } from '../../components/DefaultForm'\n\n\nconst validationSchema = yup.object().shape({\n    name: yup\n        .string()\n        .label(\"Nome\")\n        .required()\n        .max(255)\n\n});\n\nexport const Form = () => {\n\n    const { register, handleSubmit, getValues, setValue, errors, reset, watch, triggerValidation } = useForm<{\n        name,is_active\n    }>({\n\n        validationSchema: validationSchema,\n        defaultValues: {\n            is_active: true\n        }\n    });\n\n    const snackBar = useSnackbar();\n    const { id }: any = useParams();\n    const history = useHistory();\n    const [category, setCategory] = useState < Category | null > (null);\n    const [loading, setLoding] = useState < boolean > (false);\n\n    useEffect(() => {\n\n        let isSubscribed = true;\n\n        if (!id) {\n            return;\n        };\n\n        if (isSubscribed) {\n\n            (async () => {\n                setLoding(true);\n                try {\n                    const { data } = await categoryHttp.get(id);\n                    setCategory(data.data)\n                    reset(data.data);\n                } catch (error) {\n                    console.error(error);\n                    snackBar.enqueueSnackbar(\"Não foi possível carregar as informações\", {\n                        variant: 'error'\n                    });\n                } finally {\n                    setLoding(false);\n                }\n            })();\n        }\n\n        return () => {\n            isSubscribed = false;\n        };\n\n    }, []);\n\n\n    useEffect(() => {\n        register({ name: 'is_active' })\n\n    }, [register])\n\n    async function onSubmit(formData, event) {\n\n        setLoding(true);\n\n        try {\n            const http = !category\n                ? categoryHttp.create(formData)\n                : categoryHttp.update(category.id, formData);\n\n            const { data } = await http;\n            snackBar.enqueueSnackbar(\"Categoria salva com sucesso\", {\n                variant: 'success'\n            });\n\n            setTimeout(() => {\n\n                event ? (\n                    id ?\n                        history.replace(`/categories/${data.data.id}/edit`)\n                        :\n                        history.push(`/categories/${data.data.id}/edit`)\n                ) : history.push('/categories')\n            });\n\n        } catch (error) {\n            console.error(error);\n            snackBar.enqueueSnackbar(\"Não foi possível salvar a categoria\", {\n                variant: 'error'\n            });\n        } finally {\n            setLoding(false);\n        }\n    }\n    \n\n    return (\n\n        <DefaultForm onSubmit={handleSubmit(onSubmit)}>\n\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={\"outlined\"}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name?.message}\n                InputLabelProps={{ shrink: true }}\n\n            />\n\n            <TextField\n                inputRef={register}\n                disabled={loading}\n                name=\"description\"\n                label=\"Descrição\"\n                multiline\n                rows=\"4\"\n                fullWidth\n                variant={\"outlined\"}\n                margin={\"normal\"}\n                InputLabelProps={{ shrink: true }}\n            />\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        color={\"primary\"}\n                        name=\"is_active\"\n                        onChange={\n                            () => setValue('is_active', !getValues()['is_active'])\n                        }\n                        checked={watch('is_active') as boolean}\n                    />\n                }\n                label={\"Ativo?\"}\n                labelPlacement={'end'}\n                disabled={loading}\n            />\n\n            <SubmmitActions disabledButtons={loading} handleSave={() => triggerValidation().then(isvalid => { isvalid && onSubmit(getValues(), null) })} />\n\n        </DefaultForm>\n    );\n};\n\n","/code-micro-videos/frontend/src/pages/cast-member/PageForm.tsx",[],"/code-micro-videos/frontend/src/pages/cast-member/Form.tsx",["310"],"import * as React from 'react';\nimport {useForm} from \"react-hook-form\";\nimport castMemberHttp from '../../util/http/cast-member-http';\nimport { useEffect, useState } from 'react'\nimport { FormControl, FormLabel, Radio, TextField, RadioGroup, FormControlLabel, FormHelperText } from '@material-ui/core';\nimport * as yup from '../../util/vendor/yup'\nimport { useHistory, useParams } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { CastMember } from '../../util/models';\nimport SubmmitActions from '../../components/SubmmitActions';\nimport { DefaultForm } from '../../components/DefaultForm'\n\n\nconst validationSchema = yup.object().shape({\n    name: yup\n        .string()\n        .label(\"Nome\")\n        .required()\n        .max(255),\n    type: yup\n        .number()\n        .label(\"Tipo\")\n        .required(),\n\n});\n\nexport const Form = () => {\n\n    const { register, handleSubmit, getValues, setValue, errors, reset, watch, triggerValidation } = useForm({\n\n        validationSchema: validationSchema,\n\n    });\n\n    const snackBar = useSnackbar();\n    const history = useHistory();\n    const { id }: any = useParams();\n    const [castMember, setCastMember] = useState < CastMember | null > (null);\n    const [loading, setLoading] = useState < boolean > (false);\n\n\n\n    useEffect(() => {\n\n        let isSubscribed = true;\n\n        if (!id) {\n            return;\n        }\n\n        if (isSubscribed) {\n\n            (async () => {\n                setLoading(true);\n                try {\n                    const { data } = await castMemberHttp.get(id);\n                    setCastMember(data.data);\n                    reset(data.data);\n                } catch (error) {\n                    console.error(error);\n                    snackBar.enqueueSnackbar(\"Não foi possível carregar as informações\", {\n                        variant: \"error\"\n                    });\n                } finally {\n                    setLoading(false);\n                }\n            })();\n        }\n\n        return () => {\n            isSubscribed = false;\n        };\n\n    }, []);\n\n    useEffect(() => {\n        register({ name: \"type\" })\n\n    }, [register]);\n\n    async function onSubmit(formData, event) {\n\n        setLoading(true);\n\n        try {\n            const http = !castMember\n                ? castMemberHttp.create(formData)\n                : castMemberHttp.update(castMember.id, formData);\n            const { data } = await http;\n\n            snackBar.enqueueSnackbar(\"Membro de elenco salvo com sucesso\", {\n                variant: \"success\"\n            });\n\n            setTimeout(() => {\n\n                event ? (\n                    id ?\n                        history.replace(`/cast-members/${data.data.id}/edit`)\n                        :\n                        history.push(`/cast-members/${data.data.id}/edit`)\n                ) : history.push('/cast-members')\n            });\n\n        } catch (error) {\n            console.error(error);\n            snackBar.enqueueSnackbar(\"Não foi possível salvar o membro de elenco\", {\n                variant: \"error\"\n            });\n        } finally {\n            setLoading(false);\n        }\n\n    }\n\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)}>\n\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={\"outlined\"}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink: true }}\n            />\n\n            <FormControl\n                margin={\"normal\"}\n                error={errors.type !== undefined}\n                disabled={loading}\n            >\n                <FormLabel component=\"legend\" >Tipo</FormLabel>\n                <RadioGroup\n                    name=\"type\"\n                    onChange={(e) => {\n                        setValue(\"type\", parseInt(e.target.value));\n                    }}\n                    value={watch('type') + \"\"}\n                >\n\n                    <FormControlLabel value=\"1\" control={<Radio />} label=\"Diretor\" />\n                    <FormControlLabel value=\"2\" control={<Radio />} label=\"Ator\" />\n                </RadioGroup>\n\n                {\n                    errors.type && <FormHelperText id=\"text-helper-text\"> {errors.type.message} </FormHelperText>\n\n                }\n\n            </FormControl>\n\n            <SubmmitActions disabledButtons={loading} handleSave={() => triggerValidation().then(isvalid => { isvalid && onSubmit(getValues(), null) })} />\n\n        </DefaultForm>\n    );\n\n}","/code-micro-videos/frontend/src/util/http/cast-member-http.ts",[],"/code-micro-videos/frontend/src/routes/categoryRoutes.tsx",[],"/code-micro-videos/frontend/src/routes/genresRoutes.tsx",[],"/code-micro-videos/frontend/src/routes/castMembersRoutes.tsx",[],"/code-micro-videos/frontend/src/routes/dashboardRoutes.tsx",[],"/code-micro-videos/frontend/src/pages/genre/PageForm.tsx",[],"/code-micro-videos/frontend/src/pages/genre/Form.tsx",["311"],"import * as React from 'react';\nimport { useState } from 'react'\nimport {useForm} from \"react-hook-form\";\nimport { useEffect } from 'react';\nimport { TextField, MenuItem } from '@material-ui/core';\nimport categoryHttp from '../../util/http/category-http';\nimport genreHttp from '../../util/http/genre-http';\nimport * as yup from '../../util/vendor/yup'\nimport { useHistory, useParams } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { Category, Genre } from '../../util/models';\nimport SubmmitActions from '../../components/SubmmitActions';\nimport { DefaultForm } from '../../components/DefaultForm'\n\nconst validationSchema = yup.object().shape({\n    name: yup\n        .string()\n        .label(\"Nome\")\n        .required()\n        .max(255),\n    categories_id: yup\n        .array()\n        .label(\"Categorias\")\n        .required(),\n\n});\n\nexport const Form = () => {\n\n    const { register, handleSubmit, getValues, setValue, watch, errors, reset, triggerValidation } = useForm<{\n        name,\n        categories_id\n    }>({\n        validationSchema,\n        defaultValues: {\n            categories_id: [] as any\n        }\n    });\n\n\n    const snackbar = useSnackbar();\n    const history = useHistory();\n    const { id }: any = useParams();\n    const [genre, setGenre] = useState < Genre | null > (null);\n    const [categories, setCategories] = useState < Category[] > ([]);\n    const [loading, setLoading] = useState < boolean > (false);\n\n\n    useEffect(() => {\n\n        let isSubscribed = true;\n\n        if (isSubscribed) {\n\n            (async () => {\n                setLoading(true);\n                const promises = [categoryHttp.list({queryParams:{all: ''}})];\n                if (id) {\n                    promises.push(genreHttp.get(id));\n                }\n                try {\n                    const [categoriesResponse, genreResponse] = await Promise.all(promises);\n                    setCategories(categoriesResponse.data.data);\n\n                    if (id) {\n                        setGenre(genreResponse.data.data);\n                        const categories_id = genreResponse.data.data.categories.map(category => category.id)\n                        reset({\n                            ...genreResponse.data.data,\n                            categories_id\n                        });\n                    }\n\n                } catch (error) {\n                    console.error(error);\n                    snackbar.enqueueSnackbar(\"Não foi possível carregar as informações\", {\n                        variant: \"error\"\n                    })\n                } finally {\n                    setLoading(false);\n                }\n            })();\n        }\n\n        return () => {\n            isSubscribed = false;\n        };\n\n    }, []);\n\n\n    useEffect(() => {\n        register({ name: \"categories_id\" })\n\n    }, [register]);\n\n\n\n    async function onSubmit(formData, event) {\n\n        setLoading(true);\n\n        try {\n            const http = !genre\n                ? genreHttp.create(formData)\n                : genreHttp.update(genre.id, formData);\n\n            const { data } = await http;\n\n            snackbar.enqueueSnackbar(\"Gênero salvo com sucesso!\", {\n                variant: \"success\"\n            });\n\n            setTimeout(() => {\n\n                event ? (\n                    id ?\n                        history.replace(`/genres/${data.data.id}/edit`)\n                        :\n                        history.push(`/genres/${data.data.id}/edit`)\n                ) : history.push('/genres')\n            });\n\n        } catch (error) {\n            console.error(error);\n            snackbar.enqueueSnackbar(\"Não foi possível salvar o gênero\", {\n                variant: \"error\"\n            });\n\n        } finally {\n            setLoading(false);\n        }\n\n    }\n\n    return (\n        \n        <DefaultForm onSubmit={handleSubmit(onSubmit)}>\n            <TextField\n                name=\"name\"\n                label=\"Nome\"\n                fullWidth\n                variant={\"outlined\"}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name && errors.name.message}\n                InputLabelProps={{ shrink: true }}\n            />\n\n            <TextField\n                select\n                name=\"categories_id\"\n                value={watch('categories_id')}\n                label='Categorias'\n                margin={'normal'}\n                variant={'outlined'}\n                fullWidth\n                onChange={(e) => {\n                    setValue('categories_id', e.target.value);\n                }}\n\n                SelectProps={{ multiple: true }}\n                disabled={loading}\n                error={errors.categories_id !== undefined}\n                helperText={errors.categories_id && errors.categories_id.message}\n                InputLabelProps={{ shrink: true }}\n            >\n                <MenuItem value=\"\" disabled>\n                    <em>Selecione categorias</em>\n                </MenuItem>\n                {\n                    categories.map(\n                        (category, key) => (\n                            <MenuItem key={key} value={category.id} >{category.name}</MenuItem>\n                        )\n                    )\n                }\n\n            </TextField>\n\n            <SubmmitActions disabledButtons={loading} handleSave={() => triggerValidation().then(isvalid => { isvalid && onSubmit(getValues(), null) })} />\n\n        </DefaultForm>\n    );\n\n}","/code-micro-videos/frontend/src/util/http/genre-http.ts",[],"/code-micro-videos/frontend/src/theme.ts",[],"/code-micro-videos/frontend/src/components/Badge.tsx",[],"/code-micro-videos/frontend/src/util/vendor/yup.ts",["312","313","314","315"],"import {LocaleObject, setLocale} from 'yup';\n\nconst ptBR: LocaleObject = {\n    mixed: {\n        required: '${path} é requerido',\n        notType: '${path} é inválido'\n    },\n    string: {\n        max: '${path} precisa ter no máximo ${max} caracteres'\n    },\n    number: {\n        min: '${path} precisa ser no mínimo ${min}'\n    }\n};\n\nsetLocale(ptBR);\n\nexport * from 'yup';","/code-micro-videos/frontend/src/components/SnackbarProvider.tsx",[],"/code-micro-videos/frontend/src/util/models.ts",[],"/code-micro-videos/frontend/src/components/SubmmitActions.tsx",[],"/code-micro-videos/frontend/src/components/DefaultForm.tsx",[],"/code-micro-videos/frontend/src/components/Table/index.tsx",[],"/code-micro-videos/frontend/src/components/Table/FilterResetButton.tsx",[],"/code-micro-videos/frontend/src/components/Table/DebouncedTableSearch.js",[],["316","317"],"/code-micro-videos/frontend/src/store/filter/index.ts",[],["318","319"],"/code-micro-videos/frontend/src/hooks/useFilter.ts",["320"],"import {Dispatch, Reducer, useEffect, useReducer, useState} from \"react\";\nimport reducer, {Creators} from \"../store/filter\";\nimport {Actions as FilterActions, State as FilterState} from \"../store/filter/types\";\nimport {MUIDataTableColumn} from \"mui-datatables\";\nimport {useDebounce} from 'use-debounce';\nimport {useHistory} from 'react-router';\nimport {History} from 'history';\nimport {isEqual} from 'lodash';\nimport * as yup from '../util/vendor/yup';\nimport {MuiDataTableRefComponent} from \"../components/Table\";\n\ninterface FilterManagerOptions {\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    debounceTime: number;\n    history: History;\n    tableRef: React.MutableRefObject<MuiDataTableRefComponent>\n    extraFilter?: ExtraFilter\n}\n\ninterface ExtraFilter {\n    getStateFromURL: (queryParams: URLSearchParams) => any,\n    formatSearchParams: (debouncedState: FilterState) => any,\n    createValidationSchema: () => any,\n}\n\ninterface UseFilterOptions extends Omit<FilterManagerOptions, 'history'> {\n\n}\n\nexport default function useFilter(options: UseFilterOptions) {\n    const history = useHistory();\n    const filterManager = new FilterManager({...options, history});\n    const INITIAL_STATE = filterManager.getStateFromURL();\n    const [filterState, dispatch] = useReducer<Reducer<FilterState, FilterActions>>(reducer, INITIAL_STATE);\n    const [debouncedFilterState] = useDebounce(filterState, options.debounceTime);\n    const [totalRecords, setTotalRecords] = useState<number>(0);\n    filterManager.state = filterState;\n    filterManager.debouncedState = debouncedFilterState;\n    filterManager.dispatch = dispatch;\n\n    filterManager.applyOrderInColumns();\n\n    useEffect(() => {\n        filterManager.replaceHistory()\n    }, []);\n\n    return {\n        columns: filterManager.columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords\n    }\n}\n\nexport class FilterManager {\n\n    schema;\n    state: FilterState = null as any;\n    debouncedState: FilterState = null as any;\n    dispatch: Dispatch<FilterActions> = null as any;\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    history: History;\n    tableRef: React.MutableRefObject<MuiDataTableRefComponent>;\n    extraFilter?: ExtraFilter;\n\n    constructor(options: FilterManagerOptions) {\n        const {\n            columns, rowsPerPage, rowsPerPageOptions, history, tableRef, extraFilter\n        } = options;\n        this.columns = columns;\n        this.rowsPerPage = rowsPerPage;\n        this.rowsPerPageOptions = rowsPerPageOptions;\n        this.history = history;\n        this.tableRef = tableRef;\n        this.extraFilter = extraFilter;\n        this.createValidationSchema();\n    }\n\n    private resetTablePagination() {\n        this.tableRef.current.changeRowsPerPage(this.rowsPerPage);\n        this.tableRef.current.changePage(0);\n    }\n\n    changeSearch(value) {\n        this.dispatch(Creators.setSearch({search: value}));\n    }\n\n    changePage(page) {\n        this.dispatch(Creators.setPage({page: page + 1}))\n    }\n\n    changeRowsPerPage(perPage) {\n        this.dispatch(Creators.setPerPage({per_page: perPage}))\n    }\n\n    changeColumnSort(changedColumn: string, direction: string) {\n        this.dispatch(Creators.setOrder({\n                sort: changedColumn,\n                dir: direction.includes('desc') ? 'desc' : 'asc',\n            })\n        );\n        this.resetTablePagination()\n    }\n\n    changeExtraFilter(data) { \n        this.dispatch(Creators.updateExtraFilter(data));\n    }\n\n    resetFilter() {\n        const INITIAL_STATE = {\n            ...this.schema.cast({}),\n            search: {value: null, update: true}\n        };\n        this.dispatch(Creators.setReset({\n            state: INITIAL_STATE\n        }));\n        this.resetTablePagination();\n    }\n\n    applyOrderInColumns() {\n        this.columns = this.columns.map(column => {\n            return column.name === this.state.order.sort\n                ? {\n                    ...column,\n                    options: {\n                        ...column.options,\n                        sortDirection: this.state.order.dir as any\n                    }\n                }\n                : column;\n        });\n    }\n\n    cleanSearchText(text) {\n        let newText = text;\n        if (text && text.value !== undefined) {\n            newText = text.value;\n        }\n        return newText;\n    }\n\n    replaceHistory() {\n        this.history.replace({\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state: this.debouncedState\n        })\n    }\n\n    pushHistory() {\n        console.log('push history');\n        const newLocation = {\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state: {\n                ...this.debouncedState,\n                search: this.cleanSearchText(this.debouncedState.search)\n            }\n        };\n\n        const oldState = this.history.location.state;\n        const nextState = this.debouncedState;\n\n        if (isEqual(oldState, nextState)) {\n            console.log('isEqual');\n            return;\n        }\n\n        this.history.push(newLocation);\n    }\n\n    private formatSearchParams() {\n        const search = this.cleanSearchText(this.debouncedState.search);\n        return {\n            ...(search && search !== '' && {search: search}),\n            ...(this.debouncedState.pagination.page !== 1 && {page: this.debouncedState.pagination.page}),\n            ...(this.debouncedState.pagination.per_page !== 15 && {per_page: this.debouncedState.pagination.per_page}),\n            ...(\n                this.debouncedState.order.sort && {\n                    sort: this.debouncedState.order.sort,\n                    dir: this.debouncedState.order.dir\n                }\n            ),\n            ...(\n                this.extraFilter && this.extraFilter.formatSearchParams(this.debouncedState)\n            )\n        }\n    }\n\n\n    getStateFromURL() {\n        const queryParams = new URLSearchParams(this.history.location.search.substr(1));\n        return this.schema.cast({\n            search: queryParams.get('search'),\n            pagination: {\n                page: queryParams.get('page'),\n                per_page: queryParams.get('per_page'),\n            },\n            order: {\n                sort: queryParams.get('sort'),\n                dir: queryParams.get('dir'),\n            },\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.getStateFromURL(queryParams)\n                }\n            )\n        })\n    }\n\n    private createValidationSchema() {\n        this.schema = yup.object().shape({\n            search: yup.string()\n                .transform(value => !value ? undefined : value)\n                .default(''),\n            pagination: yup.object().shape({\n                page: yup.number()\n                    .transform(value => isNaN(value) || parseInt(value) < 1 ? undefined : value)\n                    .default(1),\n                per_page: yup.number()\n                    .transform(value =>\n                        isNaN(value) || !this.rowsPerPageOptions.includes(parseInt(value)) ? undefined : value\n                    )\n                    .default(this.rowsPerPage),\n            }),\n            order: yup.object().shape({\n                sort: yup.string()\n                    .nullable()\n                    .transform(value => {\n                        const columnsName = this.columns\n                            .filter(column => !column.options || column.options.sort !== false)\n                            .map(column => column.name);\n                        return columnsName.includes(value) ? value : undefined;\n                    })\n                    .default(null),\n                dir: yup.string()\n                    .nullable()\n                    .transform(value => !value || !['asc', 'desc'].includes(value.toLowerCase()) ? undefined : value)\n                    .default(null),\n            }),\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.createValidationSchema()\n                }\n            )\n        });\n    }\n}","/code-micro-videos/frontend/src/routes/videoRoutes.tsx",[],"/code-micro-videos/frontend/src/pages/video/PageForm.tsx",[],"/code-micro-videos/frontend/src/pages/video/PageList.tsx",["321"],"import * as React from 'react';\nimport {Page} from \"../../components/Page\";\nimport {Box, Fab} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Table from \"./Table\";\n\nconst PageList = () => {\n    return (\n        <Page title={'Listagem videos'}>\n            <Box dir={'rtl'} paddingBottom={2}>\n                <Fab\n                    title=\"Adicionar categoria\"\n                    color={'secondary'}\n                    size=\"small\"\n                    component={Link}\n                    to=\"/videos/create\"\n                >\n                    <AddIcon/>\n                </Fab>\n            </Box>\n            <Box>\n                <Table/>\n            </Box>\n        </Page>\n    );\n};\n\nexport default PageList;","/code-micro-videos/frontend/src/pages/video/Table.tsx",["322","323","324","325","326","327","328","329","330","331"],"import * as React from 'react';\nimport { useEffect, useReducer, useRef, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport videoHttp from \"../../util/http/video-http\";\nimport { BadgeNo, BadgeYes } from \"../../components/Badge\";\nimport { Video, ListResponse } from \"../../util/models\";\nimport DefaultTable, { makeActionStyles, TableColumn, MuiDataTableRefComponent } from '../../components/Table';\nimport { useSnackbar } from \"notistack\";\nimport { IconButton, MuiThemeProvider, Theme } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport { FilterResetButton } from \"../../components/Table/FilterResetButton\";\nimport reducer, { INITIAL_STATE, Creators } from \"../../store/filter\";\nimport useFilter from \"../../hooks/useFilter\";\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"title\",\n        label: \"Título\",\n        width: '43%',\n        options: {\n            filter: false\n        }\n        ,\n    }, {\n        name: \"genres\",\n        label: \"Gêneros\",\n        width: '13%',\n        options: {\n            sort: false,\n            filter: false,\n            customBodyRender: (value, updateValue) => {\n                return value.map(v => v.name).join(', ');\n            }\n        }\n    }, {\n        name: \"categories\",\n        label: \"Categorias\",\n        width: '12%',\n        options: {\n            sort: false,\n            filter: false,\n            customBodyRender: (value, updateValue) => {\n                return value.map(v => v.name).join(', ');\n            }\n        }\n    }\n    ,\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue) {\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            sort: false,\n            filter: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/videos/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon />\n                    </IconButton>\n                )\n            }\n        }\n    }\n];\n\nconst debounceTime = 300;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\nconst Table = () => {\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data, setData] = useState < Video[] > ([]);\n    const [loading, setLoading] = useState < boolean > (false);\n    const tableRef = useRef() as React.MutableRefObject<MuiDataTableRefComponent>;\n    const {\n        columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords,\n    } = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        tableRef\n    });\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    }, [\n        filterManager.cleanSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order\n    ]);\n\n    async function getData() {\n        setLoading(true);\n        try {\n            const { data } = await videoHttp.list < ListResponse < Video >> ({\n                queryParams: {\n                    search: filterManager.cleanSearchText(debouncedFilterState.search),\n                    page: debouncedFilterState.pagination.page,\n                    per_page: debouncedFilterState.pagination.per_page,\n                    sort: debouncedFilterState.order.sort,\n                    dir: debouncedFilterState.order.dir,\n                }\n            });\n            if (subscribed.current) {\n                setData(data.data);\n                setTotalRecords(data.meta.total);\n            }\n        } catch (error) {\n            console.error(error);\n            if (videoHttp.isCancelledRequest(error)) {\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                { variant: 'error', }\n            )\n        } finally {\n            setLoading(false);\n        }\n    }\n\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                title=\"\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                ref={tableRef}\n                options={{\n                    serverSide: true,\n                    responsive: \"scrollMaxHeight\",\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    customToolbar: () => (\n                        <FilterResetButton\n                            handleClick={() => filterManager.resetFilter()}\n                        />\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction)\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table;","/code-micro-videos/frontend/src/util/http/video-http.ts",[],"/code-micro-videos/frontend/src/components/Rating.tsx",[],"/code-micro-videos/frontend/src/pages/video/Form/Index.tsx",["332","333","334"],"import * as React from 'react';\nimport {\n\n    Checkbox,\n    FormControlLabel,\n    Grid,\n    TextField,\n    Typography,\n    useTheme,\n    Button,\n    Card,\n    CardContent,\n    makeStyles,\n    Theme\n\n} from \"@material-ui/core\";\n\nimport { useForm } from \"react-hook-form\";\n\nimport { useEffect, useState, useRef, MutableRefObject, createRef } from \"react\";\nimport { useParams, useHistory } from \"react-router\";\nimport { useSnackbar } from \"notistack\";\n\nimport { DefaultForm } from '../../../components/DefaultForm';\nimport SubmmitActions from '../../../components/SubmmitActions';\nimport videoHttp from \"../../../util/http/video-http\";\nimport * as yup from '../../../util/vendor/yup';\nimport { Video, VideoFileFieldsMap } from \"../../../util/models\";\nimport { RatingField } from './RatingField';\nimport UploadField from './UploadField'\nimport { useMediaQuery } from '@material-ui/core';\n\nimport GenreField, { GenreFieldComponent } from \"./GenreField\";\nimport CategoryField, { CategoryFieldComponent } from \"./CategoryField\";\nimport CastMemberField, { CastMemberFieldComponent } from \"./CastMemberField\";\nimport { omit, zipObject } from 'lodash';\nimport { InputFileComponent } from \"../../../components/InputFile\";\n\nimport { FormHelperText } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    cardUpload: {\n        borderRadius: \"4px\",\n        backgroundColor: \"#f5f5f5\",\n        margin: theme.spacing(2, 0)\n    },\n    cardOpened: {\n        borderRadius: \"4px\",\n        backgroundColor: \"#f5f5f5\",\n    },\n    cardContentOpened: {\n        paddingBottom: theme.spacing(2) + 'px !important'\n    },\n}));\n\nconst validationSchema = yup.object().shape({\n    title: yup.string()\n        .label('Título')\n        .required()\n        .max(255),\n    description: yup.string()\n        .label('Sinopse')\n        .required(),\n    year_launched: yup.number()\n        .label('Ano de lançamento')\n        .required()\n        .min(1),\n    duration: yup.number()\n        .label('Duração')\n        .required()\n        .min(1),\n    cast_members: yup.array()\n        .label('Elenco')\n        .required(),\n    genres: yup.array()\n        .label('Gêneros')\n        .required(),\n    categories: yup.array()\n        .label('Categorias')\n        .required()\n        .test({\n            message: 'Cada gênero escolhido precisa ter pelo menos uma categoria selecionada',\n            test(value) {\n                return value.every(\n                    v => v.categories.filter(\n                        cat => this.parent.categories.map(c => c.id).includes(cat.id)\n                    ).length !== 0\n                );\n            }\n        }),\n    rating: yup.string()\n        .label('Classificação')\n        .required()\n});\n\nconst fileFields = Object.keys(VideoFileFieldsMap);\n\nexport const Form = () => {\n    const {\n        register,\n        handleSubmit,\n        getValues,\n        setValue,\n        errors,\n        reset,\n        watch,\n        triggerValidation\n    } = useForm < {\n        title,\n        description,\n        year_launched,\n        duration,\n        thumb_file,\n        banner_file,\n        trailer_file,\n        video_file,\n        opened,\n        genres,\n        rating,\n        categories,\n        cast_members\n    } > ({\n        validationSchema,\n        defaultValues: {\n            genres: [],\n            categories: [],\n            cast_members: [],\n            opened: false,\n            rating: null\n        }\n    });\n\n    const snackbar = useSnackbar();\n    const classes = useStyles();\n    const history = useHistory();\n    const { id }: any = useParams();\n    const [video, setVideo] = useState < Video | null > (null);\n    const [loading, setLoading] = useState < boolean > (false);\n\n    const theme = useTheme();\n    const isGreaterMd = useMediaQuery(theme.breakpoints.up('md'));\n\n    const castMemberRef = useRef() as MutableRefObject<CastMemberFieldComponent>;\n    const genreRef = useRef() as MutableRefObject<GenreFieldComponent>;\n    const categoryRef = useRef() as MutableRefObject<CategoryFieldComponent>;\n    const uploadsRef = useRef(\n        zipObject(fileFields, fileFields.map(() => createRef()))\n    ) as MutableRefObject<{ [key: string]: MutableRefObject<InputFileComponent> }>;\n\n    useEffect(() => {\n        ['rating',\n            'opened',\n            'genres',\n            'categories',\n            ...fileFields].forEach(name => register({ name }));\n    }, [register])\n\n\n    useEffect(() => {\n\n        if (!id) {\n            return;\n        }\n\n        let isSubscribed = true;\n\n        (async () => {\n            setLoading(true);\n            try {\n                const { data } = await videoHttp.get(id);\n                if (isSubscribed) {\n                    setVideo(data.data);\n                    resetForm(data.data);\n                }\n            } catch (error) {\n                console.error(error);\n                snackbar.enqueueSnackbar('Não foi possível carregar as informações', { variant: 'error' });\n            } finally {\n                setLoading(false);\n            }\n        })();\n        return () => {\n            isSubscribed = false;\n        }\n    }, []);\n\n    async function onSubmit(formData, event) {\n\n        const sendData = omit(formData, ['cast_members', 'genres', 'categories']);\n        sendData['cast_members_id'] = formData['cast_members'].map(cast_member => cast_member.id);\n        sendData['categories_id'] = formData['categories'].map(category => category.id);\n        sendData['genres_id'] = formData['genres'].map(genre => genre.id);\n\n        setLoading(true);\n        try {\n            const http = !video\n                ? videoHttp.create(sendData)\n                : videoHttp.update(video.id, { ...sendData, _method: 'PUT' }, { http: { usePost: true } });\n            const { data } = await http;\n\n            snackbar.enqueueSnackbar('Vídeo salvo com sucesso', { variant: 'success' });\n\n            id && resetForm(video);\n\n            setTimeout(() => {\n                event ?\n                    (\n                        id\n                            ? history.replace(`/videos/${data.data.id}/edit`)\n                            : history.push(`/videos/${data.data.id}/edit`)\n\n\n                    ) : history.push('/videos')\n            });\n\n        } catch (error) {\n            console.error(error);\n            snackbar.enqueueSnackbar('Não foi possível salvar o vídeo', { variant: 'error' });\n        } finally {\n            setLoading(false);\n        }\n    }\n\n\n    function resetForm(data) {\n        Object.keys(uploadsRef.current).forEach(\n            field => uploadsRef.current[field].current.clear()\n        );\n        castMemberRef.current.clear();\n        genreRef.current.clear();\n        categoryRef.current.clear();\n         //reset(data);\n    }\n\n    return (\n        <DefaultForm\n            GridItemProps={{ xs: 12 }}\n            onSubmit={handleSubmit(onSubmit)}\n        >\n            <Grid container spacing={5}>\n                <Grid item xs={12} md={6}>\n                    <TextField\n                        name=\"title\"\n                        label=\"Título\"\n                        variant={'outlined'}\n                        fullWidth\n                        inputRef={register}\n                        disabled={loading}\n                        InputLabelProps={{ shrink: true }}\n                        error={errors.title !== undefined}\n                        helperText={errors.title && errors.title.message}\n                    />\n                    <TextField\n                        name=\"description\"\n                        label=\"Sinopse\"\n                        multiline\n                        rows=\"4\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        fullWidth\n                        inputRef={register}\n                        disabled={loading}\n                        InputLabelProps={{ shrink: true }}\n                        error={errors.description !== undefined}\n                        helperText={errors.description && errors.description.message}\n                    />\n                    <Grid container spacing={1}>\n                        <Grid item xs={6}>\n                            <TextField\n                                name=\"year_launched\"\n                                label=\"Ano de lançamento\"\n                                type=\"number\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                fullWidth\n                                inputRef={register}\n                                disabled={loading}\n                                InputLabelProps={{ shrink: true }}\n                                error={errors.year_launched !== undefined}\n                                helperText={errors.year_launched && errors.year_launched.message}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <TextField\n                                name=\"duration\"\n                                label=\"Duração\"\n                                type=\"number\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                fullWidth\n                                inputRef={register}\n                                disabled={loading}\n                                InputLabelProps={{ shrink: true }}\n                                error={errors.duration !== undefined}\n                                helperText={errors.duration && errors.duration.message}\n                            />\n                        </Grid>\n                    </Grid>\n\n                    <CastMemberField\n                        ref={castMemberRef}\n                        castMembers={watch('cast_members')}\n                        error={errors.genres}\n                        disabled={loading}\n                        setCastMembers={(value) => setValue('cast_members', value, true)}\n                    />\n\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} md={6}>\n                            <GenreField\n                                ref={genreRef}\n                                error={errors.genres}\n                                disabled={loading}\n                                genres={watch('genres')}\n                                setGenres={(value) => setValue('genres', value, true)}\n                                setCategories={(value) => setValue('categories', value, true)}\n                                categories={watch('categories')}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={6}>\n                            <CategoryField\n                                ref={categoryRef}\n                                error={errors.categories}\n                                disabled={loading}\n                                categories={watch('categories')}\n                                setCategories={(value) => setValue('categories', value, true)}\n                                genres={watch('genres')}\n\n                            />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <FormHelperText>\n                                Escolha os gêneros dos vídeos\n                            </FormHelperText>\n                            <FormHelperText>\n                                Escolha pelo menos uma categoria de cada gênero\n                            </FormHelperText>\n                        </Grid>\n\n                    </Grid>\n\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <RatingField\n                        value={watch('rating')}\n                        setValue={(value) => setValue('rating', value, true)}\n                        error={errors.rating}\n                        disabled={loading}\n                        FormControlProps={{\n                            margin: isGreaterMd ? 'none' : 'normal'\n                        }}\n                    />\n                    <br />\n                    <Card className={classes.cardUpload}>\n                        <CardContent>\n                            <Typography color=\"primary\" variant=\"h6\">\n                                Imagens\n                            </Typography>\n\n                            <UploadField\n                                ref={uploadsRef.current['thumb_file']}\n                                accept={'image/*'}\n                                label={'Thumb'}\n                                setValue={(value) => setValue('thumb_file', value)} />\n\n                            <UploadField\n                                ref={uploadsRef.current['banner_file']}\n\n                                accept={'image/*'}\n                                label={'Banner'}\n                                setValue={(value) => setValue('banner_file', value)} />\n\n                        </CardContent>\n                    </Card>\n\n                    <Card className={classes.cardUpload}>\n                        <CardContent>\n                            <Typography color=\"primary\" variant=\"h6\">\n                                Videos\n                            </Typography>\n\n                            <UploadField\n                                ref={uploadsRef.current['trailer_file']}\n                                accept={'video/mp4'}\n                                label={'Trailer'}\n                                setValue={(value) => setValue('trailer_file', value)} />\n\n                            <UploadField\n                                ref={uploadsRef.current['video_file']}\n                                accept={'video/mp4'}\n                                label={'Principal'}\n                                setValue={(value) => setValue('video_file', value)} />\n\n                        </CardContent>\n                    </Card>\n\n                    <Card className={classes.cardOpened}>\n                        <CardContent className={classes.cardContentOpened}>\n\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        name=\"opened\"\n                                        color={'primary'}\n                                        onChange={\n                                            () => setValue('opened', !getValues()['opened'])\n                                        }\n                                        checked={watch('opened') as boolean}\n                                        disabled={loading} />\n                                }\n                                label={\n                                    <Typography color={'primary'} variant={'subtitle2'} >\n                                        Quero que esse conteúdo apareça na seção de lançamentos\n                                    </Typography>\n                                }\n                                labelPlacement=\"end\"\n                            />\n                        </CardContent>\n\n                    </Card>\n\n                </Grid>\n\n            </Grid>\n            <SubmmitActions\n                disabledButtons={loading}\n                handleSave={() =>\n                    triggerValidation().then(isValid => {\n                        isValid && onSubmit(getValues(), null)\n                    })\n                }\n            />\n        </DefaultForm>\n    )\n}","/code-micro-videos/frontend/src/pages/video/Form/RatingField.tsx",[],"/code-micro-videos/frontend/src/components/InputFile.tsx",[],"/code-micro-videos/frontend/src/pages/video/Form/UploadField.tsx",[],"/code-micro-videos/frontend/src/components/AsyncAutoComplete.tsx",["335","336","337","338","339","340","341"],"import * as React from 'react';\nimport { Autocomplete, AutocompleteProps, UseAutocompleteSingleProps } from '@material-ui/lab';\nimport { CircularProgress, TextFieldProps } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { useState, useEffect,useImperativeHandle , RefAttributes} from 'react';\n\nimport { useDebounce } from 'use-debounce/lib';\n\ninterface AsyncAutocompleteProps extends RefAttributes<AsyncAutocompleteComponent> {\n  fetchOptions: (searchText) => Promise<any>\n  debounceTime?: number\n  TextFieldsProps?: TextFieldProps\n  AutocompleteProps?: Omit<AutocompleteProps<any>, 'renderInput'> & UseAutocompleteSingleProps<any>;\n\n};\n\nexport interface AsyncAutocompleteComponent {\n  clear: () => void;\n}\n\nconst AsyncAutocomplete = React.forwardRef<AsyncAutocompleteComponent, AsyncAutocompleteProps>((props, ref) => {\n\n\n  const { AutocompleteProps, debounceTime = 300 } = props;\n  const { freeSolo = false, onOpen, onClose, onInputChange } = AutocompleteProps as any;\n\n  const [open, setOpen] = useState(false);\n  const [searchText, setsearchText] = useState(\"\");\n  const [debouncedSearchText] = useDebounce(searchText, debounceTime);\n  const [loading, setLoading] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  const textFieldsProps: TextFieldProps = {\n    margin: 'normal',\n    variant: 'outlined',\n    fullWidth: true,\n    InputLabelProps: { shrink: true },\n    ...(props.TextFieldsProps && { ...props.TextFieldsProps })\n  }\n\n  const autoCompleteProps: AutocompleteProps<any> = {\n    ...(AutocompleteProps && { ...AutocompleteProps }),\n    open,\n    loading: loading,\n    options,\n    loadingText: 'Carregando...',\n    noOptionsText: 'Nenhum item encontrado',\n    inputValue: searchText,\n    onOpen() {\n      setOpen(true);\n      onOpen && onOpen();\n    },\n    onClose() {\n      setOpen(false);\n      onClose && onClose();\n\n    },\n    onInputChange(event, value) {\n      setsearchText(value);\n      onInputChange && onInputChange();\n    },\n    renderInput: params => (\n      <TextField\n        {...params}\n        {...textFieldsProps}\n        InputProps={{\n          ...params.InputProps,\n          endAdornment: (\n            <>\n              {loading && <CircularProgress color={\"inherit\"} size={20} />}\n              {params.InputProps.endAdornment}\n            </>\n          )\n        }}\n      />\n    )\n  }\n\n  useEffect(() => {\n\n\n    if (!open || debouncedSearchText === \"\" && freeSolo) {\n      setOptions([]);\n    }\n\n  }, [open])\n\n  useEffect(() => {\n\n    if (!open || debouncedSearchText === \"\" && freeSolo) {\n      return;\n    }\n\n    let isSubscribed = true;\n\n    (async () => {\n      setLoading(true);\n      try {\n\n        const data = await props.fetchOptions(debouncedSearchText);\n        if (isSubscribed) {\n          setOptions(data)\n        }\n\n      } finally {\n        setLoading(false);\n      }\n    })();\n\n\n    return () => {\n      isSubscribed = false;\n    };\n\n  }, [freeSolo ? debouncedSearchText : open]);\n\n  useImperativeHandle(ref,()=>({\n      clear: ()=> {\n        setsearchText(\"\");\n        setOptions([]);\n      }\n  }));\n\n\n  return (\n    <Autocomplete {...autoCompleteProps} />\n  );\n});\n\nexport default AsyncAutocomplete;","/code-micro-videos/frontend/src/components/GridSelectedItem.tsx",[],"/code-micro-videos/frontend/src/components/GridSelected.tsx",[],"/code-micro-videos/frontend/src/hooks/useHttpHandled.ts",[],"/code-micro-videos/frontend/src/pages/video/Form/GenreField.tsx",["342","343"],"import * as React from 'react';\nimport {RefAttributes, useImperativeHandle,useRef, MutableRefObject} from \"react\";\n\nimport { FormControl, FormControlProps, FormHelperText, Typography } from '@material-ui/core'\nimport AsyncAutocomplete, {AsyncAutocompleteComponent}  from '../../../components/AsyncAutoComplete';\nimport GridSelected from \"../../../components/GridSelected\";\nimport GridSelectedItem from \"../../../components/GridSelectedItem\";\nimport genreHttp from '../../../util/http/genre-http';\n\nimport useHttpHandled from '../../../hooks/useHttpHandled';\nimport useCollectionManager from '../../../hooks/useCollectionManager';\nimport { getGenresFromCategory } from '../../../util/model-filters';\n\n\n\ninterface GenreFieldProps {\n    genres: any[],\n    setGenres: (genres) => void\n    categories: any[],\n    setCategories: (categories) => void\n    error: any\n    disabled?: boolean;\n    FormControlProps?: FormControlProps\n}\n\nexport interface GenreFieldComponent {\n    clear: () => void\n}\n\nconst GenreField = React.forwardRef<GenreFieldComponent, GenreFieldProps>((props, ref) => {\n\n    const { genres,\n        setGenres,\n        categories,\n        setCategories,\n        error,\n        disabled } = props;\n    const autocompleteHttp = useHttpHandled();\n\n\n    const { addItem, removeItem } = useCollectionManager(genres, setGenres);\n    const { removeItem: removeCategory } = useCollectionManager(categories, setCategories);\n    const autocompleteRef = useRef() as MutableRefObject<AsyncAutocompleteComponent>;\n\n    function fetchOptions(searchText) {\n        return autocompleteHttp(\n\n            genreHttp.list(\n                {\n                    queryParams: {\n                        search: searchText,\n                        all: \"\"\n                    }\n                }\n            )\n        ).then(data => data.data);\n    }\n\n    useImperativeHandle(ref, () => ({\n        clear: () => autocompleteRef.current.clear()\n    }));\n\n    return (\n\n        <>\n            <AsyncAutocomplete\n                ref={autocompleteRef}\n                fetchOptions={fetchOptions}\n                AutocompleteProps={{\n                    // autoSelect: true,\n                    getOptionSelected: (option, value) => option.id === value.id,\n                    clearOnEscape: true,\n                    freeSolo: true,\n                    getOptionLabel: option => option.name,\n                    onChange: (event, value) => addItem(value),\n                    disabled: disabled\n                }}\n                TextFieldsProps={{\n                    label: 'Gêneros',\n                    error: error !== undefined\n                }}\n            />\n            <FormControl\n                error={error !== undefined}\n                disabled={disabled === true}\n                {...props.FormControlProps}\n                fullWidth\n                margin={\"normal\"}\n            >\n                <GridSelected>\n                    {\n                        genres.map((genre, key) =>\n                        (<GridSelectedItem\n                            key={key} xs={12}\n                            onDelete={() => {\n                                const categoriesWithOneGenre = categories\n                                    .filter(category => {\n                                        const genresFromCategory = getGenresFromCategory(genres, category);\n                                        return genresFromCategory.length === 1 && genres[0].id == genre.id\n                                    });\n\n                                categoriesWithOneGenre.forEach(cat => removeCategory(cat));\n                                removeItem(genre);\n                            }}>\n                            <Typography noWrap={true} >\n                                {genre.name}\n                            </Typography>\n                        </GridSelectedItem>\n                        ))\n                    }\n                </GridSelected>\n                {\n                    error && <FormHelperText> {error.message} </FormHelperText>\n                }\n\n            </FormControl>\n\n        </>\n    );\n});\n\n\nexport default GenreField;","/code-micro-videos/frontend/src/pages/video/Form/CategoryField.tsx",["344"],"import * as React from 'react';\nimport {RefAttributes, useImperativeHandle,useRef, MutableRefObject} from \"react\";\n\nimport { createStyles, FormControl, FormControlProps, FormHelperText, Typography, Theme, makeStyles } from '@material-ui/core'\nimport AsyncAutocomplete, {AsyncAutocompleteComponent}  from '../../../components/AsyncAutoComplete';\nimport GridSelected from '../../../components/GridSelected';\nimport GridSelectedItem from '../../../components/GridSelectedItem';\n\nimport useHttpHandled from '../../../hooks/useHttpHandled';\nimport useCollectionManager from '../../../hooks/useCollectionManager';\nimport categoryHttp from '../../../util/http/category-http';\nimport { Genre } from '../../../util/models';\nimport { getGenresFromCategory } from '../../../util/model-filters';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme)=> ({\n    genresSubtitle: {\n        color: grey[\"800\"],\n        fontSize: '0.8rem'\n    }\n}) );\n\n\ninterface CategoryFieldProps extends RefAttributes<CategoryFieldComponent>{\n    categories: any[],\n    setCategories: (categories) => void\n    genres: Genre[]\n    error: any\n    disabled?: boolean;\n    FormControlProps?: FormControlProps\n}\n\nexport interface CategoryFieldComponent{\n    clear: () => void\n}\n\n\nconst CategoryField = React.forwardRef<CategoryFieldComponent, CategoryFieldProps>((props, ref) => {\n\n\n    const { categories, setCategories, genres, error, disabled } = props;\n    const classes = useStyles();\n    const autocompleteHttp = useHttpHandled();\n\n    const { addItem, removeItem } = useCollectionManager(categories, setCategories);\n    \n    const autocompleteRef = useRef() as MutableRefObject<AsyncAutocompleteComponent>;\n\n    function fetchOptions(searchText) {\n\n        return autocompleteHttp(\n\n            categoryHttp.list(\n                {\n                    queryParams: {\n                        genres: genres.map(genre => genre.id).join(','),\n                        all: \"\"\n                    }\n                }\n            )\n        ).then(data => data.data);\n    }\n\n    useImperativeHandle(ref, () => ({\n        clear: () => autocompleteRef.current.clear()\n    }));\n\n\n    return (\n        <>\n            <AsyncAutocomplete\n                fetchOptions={fetchOptions}\n                ref={autocompleteRef}\n\n                AutocompleteProps={{\n                    getOptionSelected: (option, value) => option.id === value.id,\n                    clearOnEscape: true,\n                    getOptionLabel: option => option.name,\n                    onChange: (event, value) => addItem(value),\n                    disabled: disabled === true || !genres.length,\n\n                }}\n                TextFieldsProps={{\n                    label: 'Categorias',\n                    error: error !== undefined,\n\n                }}\n            />\n\n            <FormControl\n                error={error !== undefined}\n                disabled={disabled === true}\n                {...props.FormControlProps}\n                fullWidth\n                margin={\"normal\"}\n            >\n                <GridSelected>\n                    {\n                        categories.map((category, key) => {\n                            const genresFromCategory = getGenresFromCategory(genres, category)\n                                    .map(genre => genre.name).join(',');\n                            return (\n                                <GridSelectedItem\n                                    key={key}\n                                    xs={12}\n                                    onDelete={() => removeItem(category)}>\n\n                                    <Typography noWrap={true} >\n                                        {category.name}\n                                    </Typography>\n\n                                    <Typography noWrap={true} className={classes.genresSubtitle} >\n                                        Gêneros: {genresFromCategory}\n                                    </Typography>\n\n                                </GridSelectedItem>)\n                        })\n                    }\n                </GridSelected>\n\n\n                {\n                    error && <FormHelperText> {error.message} </FormHelperText>\n\n                }\n\n            </FormControl>\n\n        </>\n    );\n});\n\n\nexport default CategoryField;","/code-micro-videos/frontend/src/hooks/useCollectionManager.ts",[],"/code-micro-videos/frontend/src/util/model-filters.ts",[],"/code-micro-videos/frontend/src/pages/video/Form/CastMemberField.tsx",["345"],"// @flow\nimport * as React from 'react';\nimport AsyncAutocomplete, {AsyncAutocompleteComponent}  from '../../../components/AsyncAutoComplete';\nimport GridSelected from \"../../../components/GridSelected\";\nimport GridSelectedItem from \"../../../components/GridSelectedItem\";\nimport {FormControl, FormControlProps, FormHelperText, Grid, Typography} from \"@material-ui/core\";\nimport useHttpHandled from \"../../../hooks/useHttpHandled\";\nimport useCollectionManager from \"../../../hooks/useCollectionManager\";\nimport castMemberHttp from \"../../../util/http/cast-member-http\";\nimport {MutableRefObject, RefAttributes, useRef} from \"react\";\nimport {useImperativeHandle} from \"react\";\n\ninterface CastMemberFieldProps extends RefAttributes<CastMemberFieldProps>{\n    castMembers: any[],\n    setCastMembers: (castMembers) => void\n    error: any\n    disabled?: boolean;\n    FormControlProps?: FormControlProps\n}\n\nexport interface CastMemberFieldComponent {\n    clear: () => void\n}\n\nconst CastMemberField = React.forwardRef<CastMemberFieldComponent, CastMemberFieldProps>((props, ref) => {\n    const {\n        castMembers,\n        setCastMembers,\n        error,\n        disabled\n    } = props;\n    const autocompleteHttp = useHttpHandled();\n    const {addItem, removeItem} = useCollectionManager(castMembers, setCastMembers);\n    const autocompleteRef = useRef() as MutableRefObject<AsyncAutocompleteComponent>;\n\n    function fetchOptions(searchText) {\n        return autocompleteHttp(\n            castMemberHttp\n                .list({\n                    queryParams: {\n                        search: searchText, all: \"\"\n                    }\n                })\n        ).then(data => data.data)\n    }\n\n    useImperativeHandle(ref, () => ({\n        clear: () => autocompleteRef.current.clear()\n    }));\n\n    return (\n        <>\n            <AsyncAutocomplete\n                ref={autocompleteRef}\n                fetchOptions={fetchOptions}\n                AutocompleteProps={{\n                    //autoSelect: true,\n                    clearOnEscape: true,\n                    freeSolo: true,\n                    getOptionLabel: option => option.name,\n                    getOptionSelected: (option, value) => option.id === value.id,\n                    onChange: (event, value) => addItem(value),\n                    disabled\n                }}\n                TextFieldsProps={{\n                    label: 'Elenco',\n                    error: error !== undefined\n                }}\n            />\n            <FormControl\n                margin={\"normal\"}\n                fullWidth\n                error={error !== undefined}\n                disabled={disabled === true}\n                {...props.FormControlProps}\n            >\n                <GridSelected>\n                    {\n                        castMembers.map((castMember, key) => (\n                            <GridSelectedItem\n                                key={key}\n                                onDelete={() => {\n                                    removeItem(castMember)\n                                }}\n                                xs={6}>\n                                <Typography noWrap={true}>\n                                    {castMember.name}\n                                </Typography>\n                            </GridSelectedItem>\n                        ))\n                    }\n                </GridSelected>\n                {\n                    error && <FormHelperText>{error.message}</FormHelperText>\n                }\n            </FormControl>\n        </>\n    );\n});\n\nexport default CastMemberField;",{"ruleId":"346","replacedBy":"347"},{"ruleId":"348","replacedBy":"349"},{"ruleId":"346","replacedBy":"350"},{"ruleId":"348","replacedBy":"351"},{"ruleId":"352","severity":1,"message":"353","line":2,"column":20,"nodeType":"354","messageId":"355","endLine":2,"endColumn":30},{"ruleId":"352","severity":1,"message":"356","line":10,"column":39,"nodeType":"354","messageId":"355","endLine":10,"endColumn":44},{"ruleId":"352","severity":1,"message":"357","line":14,"column":8,"nodeType":"354","messageId":"355","endLine":14,"endColumn":15},{"ruleId":"352","severity":1,"message":"358","line":14,"column":18,"nodeType":"354","messageId":"355","endLine":14,"endColumn":31},{"ruleId":"352","severity":1,"message":"359","line":14,"column":33,"nodeType":"354","messageId":"355","endLine":14,"endColumn":41},{"ruleId":"352","severity":1,"message":"360","line":98,"column":9,"nodeType":"354","messageId":"355","endLine":98,"endColumn":17},{"ruleId":"361","severity":1,"message":"362","line":116,"column":8,"nodeType":"363","endLine":121,"endColumn":6,"suggestions":"364"},{"ruleId":"361","severity":1,"message":"365","line":117,"column":9,"nodeType":"366","endLine":117,"endColumn":67},{"ruleId":"352","severity":1,"message":"360","line":102,"column":9,"nodeType":"354","messageId":"355","endLine":102,"endColumn":17},{"ruleId":"361","severity":1,"message":"362","line":157,"column":8,"nodeType":"363","endLine":163,"endColumn":6,"suggestions":"367"},{"ruleId":"361","severity":1,"message":"365","line":158,"column":9,"nodeType":"366","endLine":158,"endColumn":67},{"ruleId":"361","severity":1,"message":"365","line":162,"column":9,"nodeType":"366","endLine":162,"endColumn":57},{"ruleId":"352","severity":1,"message":"368","line":18,"column":9,"nodeType":"354","messageId":"355","endLine":18,"endColumn":18},{"ruleId":"352","severity":1,"message":"369","line":107,"column":12,"nodeType":"354","messageId":"355","endLine":107,"endColumn":22},{"ruleId":"352","severity":1,"message":"360","line":115,"column":9,"nodeType":"354","messageId":"355","endLine":115,"endColumn":17},{"ruleId":"361","severity":1,"message":"370","line":181,"column":8,"nodeType":"363","endLine":181,"endColumn":10,"suggestions":"371"},{"ruleId":"361","severity":1,"message":"362","line":190,"column":8,"nodeType":"363","endLine":196,"endColumn":6,"suggestions":"372"},{"ruleId":"361","severity":1,"message":"365","line":191,"column":9,"nodeType":"366","endLine":191,"endColumn":67},{"ruleId":"361","severity":1,"message":"365","line":195,"column":9,"nodeType":"366","endLine":195,"endColumn":57},{"ruleId":"361","severity":1,"message":"373","line":73,"column":8,"nodeType":"363","endLine":73,"endColumn":10,"suggestions":"374"},{"ruleId":"361","severity":1,"message":"373","line":74,"column":8,"nodeType":"363","endLine":74,"endColumn":10,"suggestions":"375"},{"ruleId":"361","severity":1,"message":"376","line":89,"column":8,"nodeType":"363","endLine":89,"endColumn":10,"suggestions":"377"},{"ruleId":"378","severity":1,"message":"379","line":5,"column":19,"nodeType":"380","messageId":"381","endLine":5,"endColumn":40},{"ruleId":"378","severity":1,"message":"379","line":6,"column":18,"nodeType":"380","messageId":"381","endLine":6,"endColumn":38},{"ruleId":"378","severity":1,"message":"379","line":9,"column":14,"nodeType":"380","messageId":"381","endLine":9,"endColumn":63},{"ruleId":"378","severity":1,"message":"379","line":12,"column":14,"nodeType":"380","messageId":"381","endLine":12,"endColumn":52},{"ruleId":"346","replacedBy":"350"},{"ruleId":"348","replacedBy":"351"},{"ruleId":"346","replacedBy":"382"},{"ruleId":"348","replacedBy":"383"},{"ruleId":"361","severity":1,"message":"384","line":47,"column":8,"nodeType":"363","endLine":47,"endColumn":10,"suggestions":"385"},{"ruleId":"352","severity":1,"message":"386","line":8,"column":7,"nodeType":"354","messageId":"355","endLine":8,"endColumn":15},{"ruleId":"352","severity":1,"message":"353","line":2,"column":21,"nodeType":"354","messageId":"355","endLine":2,"endColumn":31},{"ruleId":"352","severity":1,"message":"387","line":6,"column":10,"nodeType":"354","messageId":"355","endLine":6,"endColumn":17},{"ruleId":"352","severity":1,"message":"388","line":6,"column":19,"nodeType":"354","messageId":"355","endLine":6,"endColumn":27},{"ruleId":"352","severity":1,"message":"356","line":10,"column":40,"nodeType":"354","messageId":"355","endLine":10,"endColumn":45},{"ruleId":"352","severity":1,"message":"357","line":14,"column":8,"nodeType":"354","messageId":"355","endLine":14,"endColumn":15},{"ruleId":"352","severity":1,"message":"358","line":14,"column":19,"nodeType":"354","messageId":"355","endLine":14,"endColumn":32},{"ruleId":"352","severity":1,"message":"359","line":14,"column":34,"nodeType":"354","messageId":"355","endLine":14,"endColumn":42},{"ruleId":"352","severity":1,"message":"360","line":107,"column":9,"nodeType":"354","messageId":"355","endLine":107,"endColumn":17},{"ruleId":"361","severity":1,"message":"362","line":125,"column":8,"nodeType":"363","endLine":130,"endColumn":6,"suggestions":"389"},{"ruleId":"361","severity":1,"message":"365","line":126,"column":9,"nodeType":"366","endLine":126,"endColumn":67},{"ruleId":"352","severity":1,"message":"390","line":10,"column":5,"nodeType":"354","messageId":"355","endLine":10,"endColumn":11},{"ruleId":"352","severity":1,"message":"391","line":106,"column":9,"nodeType":"354","messageId":"355","endLine":106,"endColumn":14},{"ruleId":"361","severity":1,"message":"392","line":186,"column":8,"nodeType":"363","endLine":186,"endColumn":10,"suggestions":"393"},{"ruleId":"394","severity":1,"message":"395","line":82,"column":15,"nodeType":"396","messageId":"397","endLine":82,"endColumn":17},{"ruleId":"394","severity":1,"message":"395","line":82,"column":45,"nodeType":"396","messageId":"397","endLine":82,"endColumn":47},{"ruleId":"361","severity":1,"message":"398","line":86,"column":6,"nodeType":"363","endLine":86,"endColumn":12,"suggestions":"399"},{"ruleId":"394","severity":1,"message":"395","line":90,"column":15,"nodeType":"396","messageId":"397","endLine":90,"endColumn":17},{"ruleId":"394","severity":1,"message":"395","line":90,"column":45,"nodeType":"396","messageId":"397","endLine":90,"endColumn":47},{"ruleId":"361","severity":1,"message":"400","line":115,"column":6,"nodeType":"363","endLine":115,"endColumn":45,"suggestions":"401"},{"ruleId":"361","severity":1,"message":"365","line":115,"column":7,"nodeType":"402","endLine":115,"endColumn":44},{"ruleId":"352","severity":1,"message":"403","line":2,"column":9,"nodeType":"354","messageId":"355","endLine":2,"endColumn":22},{"ruleId":"404","severity":1,"message":"405","line":99,"column":96,"nodeType":"406","messageId":"407","endLine":99,"endColumn":98},{"ruleId":"352","severity":1,"message":"408","line":4,"column":10,"nodeType":"354","messageId":"355","endLine":4,"endColumn":22},{"ruleId":"352","severity":1,"message":"409","line":6,"column":56,"nodeType":"354","messageId":"355","endLine":6,"endColumn":60},"no-native-reassign",["410"],"no-negated-in-lhs",["411"],["410"],["411"],"@typescript-eslint/no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'Theme' is defined but never used.","'reducer' is defined but never used.","'INITIAL_STATE' is defined but never used.","'Creators' is defined but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterManager' and 'getData'. Either include them or remove the dependency array.","ArrayExpression",["412"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["413"],"'cloneDeep' is defined but never used.","'categories' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnCategories.options' and 'snackbar'. Either include them or remove the dependency array.",["414"],["415"],"React Hook useEffect has missing dependencies: 'id', 'reset', and 'snackBar'. Either include them or remove the dependency array.",["416"],["417"],"React Hook useEffect has missing dependencies: 'id', 'reset', and 'snackbar'. Either include them or remove the dependency array.",["418"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression",["410"],["411"],"React Hook useEffect has a missing dependency: 'filterManager'. Either include it or remove the dependency array.",["419"],"'PageList' is assigned a value but never used.","'BadgeNo' is defined but never used.","'BadgeYes' is defined but never used.",["420"],"'Button' is defined but never used.","'reset' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'snackbar'. Either include them or remove the dependency array.",["421"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'debouncedSearchText' and 'freeSolo'. Either include them or remove the dependency array.",["422"],"React Hook useEffect has missing dependencies: 'debouncedSearchText', 'freeSolo', 'open', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["423"],"ConditionalExpression","'RefAttributes' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'createStyles' is defined but never used.","'Grid' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"424","fix":"425"},{"desc":"424","fix":"426"},{"desc":"427","fix":"428"},{"desc":"424","fix":"429"},{"desc":"430","fix":"431"},{"desc":"430","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"424","fix":"437"},{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},"Update the dependencies array to be: [debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",{"range":"444","text":"445"},{"range":"446","text":"445"},"Update the dependencies array to be: [columnCategories.options, snackbar]",{"range":"447","text":"448"},{"range":"449","text":"445"},"Update the dependencies array to be: [id, reset, snackBar]",{"range":"450","text":"451"},{"range":"452","text":"451"},"Update the dependencies array to be: [id, reset, snackbar]",{"range":"453","text":"454"},"Update the dependencies array to be: [filterManager]",{"range":"455","text":"456"},{"range":"457","text":"445"},"Update the dependencies array to be: [id, snackbar]",{"range":"458","text":"459"},"Update the dependencies array to be: [debouncedSearchText, freeSolo, open]",{"range":"460","text":"461"},"Update the dependencies array to be: [debouncedSearchText, freeSolo, open, props]",{"range":"462","text":"463"},[3342,3548],"[debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",[4851,5115],[5810,5812],"[columnCategories.options, snackbar]",[6009,6273],[2022,2024],"[id, reset, snackBar]",[2077,2079],[2765,2767],"[id, reset, snackbar]",[1781,1783],"[filterManager]",[3602,3808],[5137,5139],"[id, snackbar]",[2486,2492],"[debouncedSearchText, freeSolo, open]",[2941,2980],"[debouncedSearchText, freeSolo, open, props]"]